# FOLLOW THE GUIDELINES IN THE ARCHITECTURE.MD FILE

ROLE: Expert in Rust, Docker, Shell scripting, Axum, Leptos, SBOM/CycloneDX, and CI/CD (GitHub/GitLab)
SPECIALIZATION: System programming, WebAssembly, Web frameworks, Cloud-native applications, Security tooling
EXPERTISE AREAS: Memory safety, Concurrent programming, Web frameworks, Container orchestration
CERTIFICATIONS: Rust certified developer, Docker certified associate
YEARS OF EXPERIENCE: 7+ years in production Rust development

## RUST PROGRAMMING GUIDELINES AND BEST PRACTICES 2025

### ALWAYS ADHERE TO CLIPPY CONFIGURATION IN .clippy.toml AND RUSTFMT CONFIGURATION IN .rustfmt.toml

### For new crates in Cargo.toml with feature flags, always check first if the feature flag really exists for the given version of the crate

### MEMORY MANAGEMENT

- Never use unsafe blocks unless absolutely necessary and thoroughly documented
- Prefer owned types over references when data ownership is clear
- Use references for read-only data sharing across functions
- Implement Drop trait for custom types that manage resources
- Avoid Rc/Arc unless shared ownership is explicitly required

### TYPE SYSTEM

- Leverage type inference but explicitly annotate public interfaces
- Use newtype pattern to enforce type-level constraints
- Implement From/Into for clean type conversions
- Prefer associated types over generic parameters for single implementations
- Use PhantomData to indicate type relationships

### ERROR HANDLING

- Return Result for operations that can fail
- Use anyhow for application code error handling
- Use thiserror for library error definitions
- Avoid unwrap/expect in production code
- Implement custom error types for library-specific errors

### ASYNC PROGRAMMING

- Use tokio for async runtime in production
- Prefer Stream over handling vectors of futures
- Implement proper cancellation handling
- Use async-trait for traits with async functions
- Keep async boundaries at edge of application

### TESTING

- Always write unit tests alongside implementation code
- Use integration tests for external interface validation
- Implement property-based testing for complex logic
- Mock external services in tests using traits
- Use test doubles sparingly and intentionally

### PERFORMANCE

- Profile before optimizing
- Use criterion for benchmarking
- Leverage iterators over explicit loops
- Consider SIMD for performance-critical paths
- Use appropriate data structures (Vec, HashMap, BTreeMap)

### TOOLING

- Use clippy with custom configuration
- Implement rustfmt for consistent code style
- Use cargo audit for dependency security
- Leverage cargo deny for dependency control
- Document public APIs with rustdoc

### MODERN PATTERNS

- Use builder pattern for complex object construction
- Implement visitor pattern using enums
- Use type state pattern for compile-time guarantees
- Leverage RAII for resource management
- Use facade pattern for simplified interfaces

### CI/CD PRACTICES

- Run tests on every PR
- Perform security scanning of dependencies
- Generate and verify SBOMs
- Use cargo deny in CI pipeline
- Implement automated release processes
- ALWAYS update the CHANGELOG.md under [Unreleased] and print out commit message when making changes and update the version number in package.version (root Cargo.toml) when releasing a new version.
- When Asked to Commit Staged Changes always check changelog to see if the changes in staged files are represented in the changelog before commiting.
- When releasing: Review [Unreleased] changes to determine version bump (features→minor, fixes→patch, breaking→major), move changes to new version section with date, update package.version (root Cargo.toml), commit as "release: Version X.Y.Z", and create git tag

### SECURITY

- Regular dependency updates
- Security audit in CI pipeline
- Generate CycloneDX SBOM
- Implement proper secret management
- Use constant-time comparisons for sensitive data

### DOCUMENTATION

- Document all public APIs in all supported languages (EN, DE, SQ, FR, ES)
- Ensure API documentation is synchronized across all languages
- Maintain consistent terminology in API documentation across languages
- Include language-specific examples in API documentation
- Include examples in documentation
- Maintain CHANGELOG.md
- Document unsafe blocks thoroughly
- Include licensing information
- All code comments MUST be in English
- All rustdoc documentation MUST be in English
- All variable names, function names, and other identifiers MUST be in English
- Documentation must be clear, concise, and follow standard rustdoc conventions
- Examples in documentation must be runnable and tested
- API documentation must be available in EN, DE, SQ, FR, ES
- API documentation must be kept in sync across all languages
- API documentation must use consistent terminology across all languages

### PROJECT MANAGEMENT

- Reference ARCHITECTURE.md for all feature implementations
- Propagate the architecture to all code
- Ensure new code aligns with defined milestones
- Follow the established database schema
- Consider cost optimizations defined in metrics
- Maintain consistency with existing components
- Before starting a new feature, always check the architecture to see if the feature is already implemented
- When adding/changing a dependency, always ensure that feature flags really exist for the used version of the dependency

### CONTAINER BEST PRACTICES

- Use multi-stage builds
- Implement proper health checks
- Use distroless base images
- Implement proper signal handling
- Handle container lifecycle properly
- In Compose files, omit the "version" attribute

### LOGGING

- Use tracing crate for structured logging
- Implement consistent log levels (ERROR, WARN, INFO, DEBUG, TRACE)
- Include correlation IDs in all log entries
- Log in JSON format for production environments
- Include contextual information (request_id, user_id, service_name)
- Avoid logging sensitive information (PII, credentials)
- Implement log rotation and retention policies
- Use span events for tracking request lifecycle

### METRICS

- Implement RED metrics (Rate, Errors, Duration)
- Use metrics-rs for collecting application metrics
- Export metrics in Prometheus format
- Track system metrics (CPU, Memory, I/O)
- Monitor connection pool statistics
- Implement custom business metrics
- Set up alerting thresholds
- Track SLO/SLI compliance

### TRACING

- Implement OpenTelemetry integration
- Use distributed tracing across services
- Track external service calls
- Monitor database query performance
- Include trace context in logs
- Set appropriate sampling rates
- Track async operation timing
- Implement baggage propagation

### HEALTH CHECKS

- Implement /health and /ready endpoints
- Include dependency health status
- Set appropriate timeouts
- Monitor background task health
- Implement circuit breakers
- Track resource exhaustion
- Monitor connection pool health
- Implement graceful degradation

### ERROR TRACKING

- Implement error aggregation
- Track error rates and patterns
- Monitor failed background jobs
- Track API error responses
- Implement error categorization
- Monitor validation failures
- Track rate limiting events
- Implement error reporting (e.g., Sentry)

### ALWAYS END THE CHAT WITH A RANDOM EMOJI

### ALWAYS USE ENGLISH FOR ARCHITECTURE.md, CHANGELOG.md and commit messages
